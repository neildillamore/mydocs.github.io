{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Principles to Follow \u00b6 Overview of the main principles to follow with any Digital Project. 1. User Centred Design \u00b6 Make sure that the user is at the centre of all efforts. User Research \u00b6 Understand users, their needs and goals, their behaviour. User Experience \u00b6 Is the application easy and efficient to use by the user? Is it accessible to all users and not exclude any subset of users? Is the interface consistent? Wireframes \u00b6 Use mockups and wireframes to get user feedback at an early stage. Use them to enable testing to be planned in parallel with development. 2. Work in the Open \u00b6 Be open about all work - document everything, including a decision log and a risk log. Allow access to all who might be interested to all documentation, code and work trackers (e.g. JIRA). Merge Review process \u00b6 Conduct code reviews on all code before accepting it. Use tools to that allow code reviews that enable a record of the conversation to be visible. 3. Reuse before Rewrite \u00b6 Consider what might already exist before building new. Discovering what exists \u00b6 Look to open source libraries and frameworks before building afresh. Always think about creating shared libraries across applications or components of applications. 4. Prioritise Open Standards \u00b6 Build and use open source wherever possible. Use open languages, libraries, and frameworks. 5. Continuous Iteration \u00b6 Expect and plan for iterations. Start small, think big, scale fast. Agile \u00b6 Use the principles of the Agile Manifesto . Adapt them to the organisation and role you find yourself in. Continuous Integration and Continuous Delivery/Deployment \u00b6 CI means try to keep the time between writing the code and its successful integration into the deployable codebase as small as possible. To achieve this you will probably need automated testing. CD means try to keep the time between writing the code and its successful deployment to production as small as possible, again automation will enable this. Minimising these, while also minimising the risk of defects, enables value to be realised more quickly. Security \u00b6 Security should be thought of at all points of the software lifecycle, sometimes called DevSecOps. Cost and Performance optimisation \u00b6 While trying to increase the performance a solution consider the whole cost. This includes things such as cloud hosting costs, licence costs, labour costs. 6. Ensure It's Sustainable \u00b6 Sustainable Technology Choices \u00b6 Consider: - Using serverless technologies that do not utilise a server that is always on - Turning off resources outside office hours - Right sizing - Technology that fits in with the organisation Maintainability \u00b6 Endeavour to create software that can be maintained by choosing languages, libraries and frameworks that are themselves maintained. Create code that is readable and follows clean code principles. 7. Cloud First \u00b6 The lead time for deployment of hardware and applications leads most organisations to consider cloud first for their hosting. Also, considerations of hardware lifecycle, who is going to hold the pager to fix servers in the middle of the night, reliability, availability, security, and the sustainability of shared infrastructure give weight to the argument. Cloud native \u00b6 Historically people were worried about cloud agnosticism but we have come to realise that using cloud native services, such as SQS on AWS, Google Firestore, Azure DevOps enables solutions to be developed quicker, with scalability and disaster recovery benefits that outweigh the cost of a re-platforming that may never happen. 8. Automate All The Things \u00b6 Automation promotes quality by its accuracy, repeatability, auditability, and transparency. Monitoring, Metrics and Alarms (Observability) \u00b6 While code has tests to ensure quality, environments have monitoring, metrics, and alarms. These should be considered just as important. Consider logging standards and defining Service Level Objectives (SLOs). Test automation \u00b6 Using a build server to automate the execution of tests promotes quality. 9. Promote an Enjoyable Developer Experience \u00b6 Known as DevEx or Developer Productivity Engineering, consider the environment and tools that everyone has to work in and with. Developer Experience \u00b6 Consider what are the pain points at each point in the software delivery lifecycle. 10. Bringing Ingenuity to Life \u00b6 Foster creativity, be open to new ideas, and bring ingenuity to life.","title":"Overarching Principles"},{"location":"#principles-to-follow","text":"Overview of the main principles to follow with any Digital Project.","title":"Principles to Follow"},{"location":"#1-user-centred-design","text":"Make sure that the user is at the centre of all efforts.","title":"1. User Centred Design"},{"location":"#user-research","text":"Understand users, their needs and goals, their behaviour.","title":"User Research"},{"location":"#user-experience","text":"Is the application easy and efficient to use by the user? Is it accessible to all users and not exclude any subset of users? Is the interface consistent?","title":"User Experience"},{"location":"#wireframes","text":"Use mockups and wireframes to get user feedback at an early stage. Use them to enable testing to be planned in parallel with development.","title":"Wireframes"},{"location":"#2-work-in-the-open","text":"Be open about all work - document everything, including a decision log and a risk log. Allow access to all who might be interested to all documentation, code and work trackers (e.g. JIRA).","title":"2. Work in the Open"},{"location":"#merge-review-process","text":"Conduct code reviews on all code before accepting it. Use tools to that allow code reviews that enable a record of the conversation to be visible.","title":"Merge Review process"},{"location":"#3-reuse-before-rewrite","text":"Consider what might already exist before building new.","title":"3. Reuse before Rewrite"},{"location":"#discovering-what-exists","text":"Look to open source libraries and frameworks before building afresh. Always think about creating shared libraries across applications or components of applications.","title":"Discovering what exists"},{"location":"#4-prioritise-open-standards","text":"Build and use open source wherever possible. Use open languages, libraries, and frameworks.","title":"4. Prioritise Open Standards"},{"location":"#5-continuous-iteration","text":"Expect and plan for iterations. Start small, think big, scale fast.","title":"5. Continuous Iteration"},{"location":"#agile","text":"Use the principles of the Agile Manifesto . Adapt them to the organisation and role you find yourself in.","title":"Agile"},{"location":"#continuous-integration-and-continuous-deliverydeployment","text":"CI means try to keep the time between writing the code and its successful integration into the deployable codebase as small as possible. To achieve this you will probably need automated testing. CD means try to keep the time between writing the code and its successful deployment to production as small as possible, again automation will enable this. Minimising these, while also minimising the risk of defects, enables value to be realised more quickly.","title":"Continuous Integration and Continuous Delivery/Deployment"},{"location":"#security","text":"Security should be thought of at all points of the software lifecycle, sometimes called DevSecOps.","title":"Security"},{"location":"#cost-and-performance-optimisation","text":"While trying to increase the performance a solution consider the whole cost. This includes things such as cloud hosting costs, licence costs, labour costs.","title":"Cost and Performance optimisation"},{"location":"#6-ensure-its-sustainable","text":"","title":"6. Ensure It's Sustainable"},{"location":"#sustainable-technology-choices","text":"Consider: - Using serverless technologies that do not utilise a server that is always on - Turning off resources outside office hours - Right sizing - Technology that fits in with the organisation","title":"Sustainable Technology Choices"},{"location":"#maintainability","text":"Endeavour to create software that can be maintained by choosing languages, libraries and frameworks that are themselves maintained. Create code that is readable and follows clean code principles.","title":"Maintainability"},{"location":"#7-cloud-first","text":"The lead time for deployment of hardware and applications leads most organisations to consider cloud first for their hosting. Also, considerations of hardware lifecycle, who is going to hold the pager to fix servers in the middle of the night, reliability, availability, security, and the sustainability of shared infrastructure give weight to the argument.","title":"7. Cloud First"},{"location":"#cloud-native","text":"Historically people were worried about cloud agnosticism but we have come to realise that using cloud native services, such as SQS on AWS, Google Firestore, Azure DevOps enables solutions to be developed quicker, with scalability and disaster recovery benefits that outweigh the cost of a re-platforming that may never happen.","title":"Cloud native"},{"location":"#8-automate-all-the-things","text":"Automation promotes quality by its accuracy, repeatability, auditability, and transparency.","title":"8. Automate All The Things"},{"location":"#monitoring-metrics-and-alarms-observability","text":"While code has tests to ensure quality, environments have monitoring, metrics, and alarms. These should be considered just as important. Consider logging standards and defining Service Level Objectives (SLOs).","title":"Monitoring, Metrics and Alarms (Observability)"},{"location":"#test-automation","text":"Using a build server to automate the execution of tests promotes quality.","title":"Test automation"},{"location":"#9-promote-an-enjoyable-developer-experience","text":"Known as DevEx or Developer Productivity Engineering, consider the environment and tools that everyone has to work in and with.","title":"9. Promote an Enjoyable Developer Experience"},{"location":"#developer-experience","text":"Consider what are the pain points at each point in the software delivery lifecycle.","title":"Developer Experience"},{"location":"#10-bringing-ingenuity-to-life","text":"Foster creativity, be open to new ideas, and bring ingenuity to life.","title":"10. Bringing Ingenuity to Life"},{"location":"archive/","text":"Index \u00b6 Introduction \u00b6 This is the homepage of documentation that relates to communities of practice, general principles and best practice within Digital and provides many links out to provide useful information and learning for anyone in our team. Navigation \u00b6 Follow the navigation to drill down through relevant pages. Use the search to find specific keywords.","title":"Index"},{"location":"archive/#index","text":"","title":"Index"},{"location":"archive/#introduction","text":"This is the homepage of documentation that relates to communities of practice, general principles and best practice within Digital and provides many links out to provide useful information and learning for anyone in our team.","title":"Introduction"},{"location":"archive/#navigation","text":"Follow the navigation to drill down through relevant pages. Use the search to find specific keywords.","title":"Navigation"},{"location":"archive/about/","text":"About this Site \u00b6 Introduction \u00b6 This site is designed to hold our digital engineering guidance and standards It is a collaborative space that anyone can contribute to. All contributions will require peer review and should represent our thoughts, designs, architectures, patterns etc that represent our idea of best practice. Contributing \u00b6 Everyone should feel happy to contribute. All these documents are held in github. Simply create a branch, add/alter anything that you feel would be useful to others and then submit the branch for peer reviewing to the slack channel xxxxxx. Once approved. merge your branch to main and the docs will automatically be updated with your changes. Code of Conduct \u00b6 See the Code of Conduct page for more details about contributing","title":"About this Site"},{"location":"archive/about/#about-this-site","text":"","title":"About this Site"},{"location":"archive/about/#introduction","text":"This site is designed to hold our digital engineering guidance and standards It is a collaborative space that anyone can contribute to. All contributions will require peer review and should represent our thoughts, designs, architectures, patterns etc that represent our idea of best practice.","title":"Introduction"},{"location":"archive/about/#contributing","text":"Everyone should feel happy to contribute. All these documents are held in github. Simply create a branch, add/alter anything that you feel would be useful to others and then submit the branch for peer reviewing to the slack channel xxxxxx. Once approved. merge your branch to main and the docs will automatically be updated with your changes.","title":"Contributing"},{"location":"archive/about/#code-of-conduct","text":"See the Code of Conduct page for more details about contributing","title":"Code of Conduct"},{"location":"archive/code-of-conduct/","text":"Our Code of Conduct \u00b6 Introduction \u00b6 Contributors to repositories hosted here are expected to follow the Contributor Covenant Code of Conduct Our Standards \u00b6 Examples of behaviours that contribute to a positive environment for everyone includes: Be respectful of others opinions. Everyone has different experiences. Empathy and kindness toward other people. Constructive feedback is important. The site is designed for everyone, be mindful of this.","title":"Our Code of Conduct"},{"location":"archive/code-of-conduct/#our-code-of-conduct","text":"","title":"Our Code of Conduct"},{"location":"archive/code-of-conduct/#introduction","text":"Contributors to repositories hosted here are expected to follow the Contributor Covenant Code of Conduct","title":"Introduction"},{"location":"archive/code-of-conduct/#our-standards","text":"Examples of behaviours that contribute to a positive environment for everyone includes: Be respectful of others opinions. Everyone has different experiences. Empathy and kindness toward other people. Constructive feedback is important. The site is designed for everyone, be mindful of this.","title":"Our Standards"},{"location":"archive/outline/","text":"Plan \u00b6 Bullet points for major principles Templates for different types of doc Example of each different type of doc Technology Code of Practice \u00b6 User Centred Design \u00b6 What is user centred design? What is UX? What are User Stories? User research methods Accessible and Inclusive \u00b6 Introduction to WCAG Introduction Screen Readers and ARIA The tools used for development should be accessible too, e.g. dyslexic, colour blind, or visually impaired developers Work in the open/transparency/collaboration \u00b6 All code committed to a repo Pull/Merge requests as a record of work Ticket system as transparent means of planning work Documentation available to all. Documentation as code e.g. this Document design decisions as transparency Using open source code Introduction to open source licences e.g. copyleft, apache/BSD Publishing open source software Publishing thought leadership e.g. Medium, LinkedIn Share/Reuse \u00b6 Shared libraries Shared build code e.g. gradle plugins, npm scripts Shared testing code Sharing pipeline code e.g. Jenkins Having a platform team that maintains all the tools and standards for other teams Use Open standards \u00b6 Open source / free languages Open source tooling Open source application servers Data standards, e.g. HTML, JSON, XML, Markdown, Parquet Cloud First \u00b6 Lead time to deployment of hardware and applications Hardware lifecycle Holding the pager Reliability, availability Sustainability argument (shared infrastructure) Cloud native \u00b6 Historically people were worried about cloud agnosticism but we have come to realise that using cloud native services, such as SQS on AWS, Google Firestore, Azure DevOps enables solutions to be developed quicker, with scalability and disaster recovery benefits that outweigh the cost of a re-platforming that may never happen Secure by design / Continuous security \u00b6 Security of your toolchain/development - Use maintained laptops, e.g. PA Laptop with virus protection and ability to be 'bricked' - Use tools/libraries from reputable software houses - Use tools/libraries that are maintained and covered by vulnerability scanning tools - Update tools regularly e.g. IDE - SBOMs/nightly builds to check for vulnerabilities - Secure repositories - Secure build servers - Secure deployment methods e.g. not sharing cloud creds wider than necessary Risk register Principle of least privilege for users Not having secrets on the client side that give access to other users' data/permissions No credentials in code / using a secret store Separation of prod and non-prod MFA Data encryption in transit and in rest Recommended TLS SSH key standards Sustainable by design \u00b6 Using serverless Turning off resources outside office hours Right sizing Fits in with existing technology and existing knowledge in the organisation Continual Improvement \u00b6 Horizon scanning / tech radar Using new Cloud tech Meetups internal and external Coding standards / peer review / pair programming Pipelines / Automation / Release strategies \u00b6 Explain CI/CD Automate all the things (Build, security scan, test, deploy, CI/CD, IaC) Monolith / Microservices Git branching/tagging strategies Monorepo / polyrepo Deployment strategies (Rolling, Blue/Green, Canary) Release independent of deploy (dark live, feature switches) Monitor/measure and analysis \u00b6 Build/test/deploy times Code has tests, environments have monitoring, metrics, and alarms Developer experience \u00b6 Empowered Developers - able to make changes to dependencies Empowered Teams - cross-functional team able to remove blockers themselves / everything they need to deliver in the gift of the team Local build time e.g. build caches Local test time e.g. ability to run a subset of tests Availability of a local environment or short cycle time dev env CI build time Deployment time Agile? \u00b6","title":"Plan"},{"location":"archive/outline/#plan","text":"Bullet points for major principles Templates for different types of doc Example of each different type of doc","title":"Plan"},{"location":"archive/outline/#technology-code-of-practice","text":"","title":"Technology Code of Practice"},{"location":"archive/outline/#user-centred-design","text":"What is user centred design? What is UX? What are User Stories? User research methods","title":"User Centred Design"},{"location":"archive/outline/#accessible-and-inclusive","text":"Introduction to WCAG Introduction Screen Readers and ARIA The tools used for development should be accessible too, e.g. dyslexic, colour blind, or visually impaired developers","title":"Accessible and Inclusive"},{"location":"archive/outline/#work-in-the-opentransparencycollaboration","text":"All code committed to a repo Pull/Merge requests as a record of work Ticket system as transparent means of planning work Documentation available to all. Documentation as code e.g. this Document design decisions as transparency Using open source code Introduction to open source licences e.g. copyleft, apache/BSD Publishing open source software Publishing thought leadership e.g. Medium, LinkedIn","title":"Work in the open/transparency/collaboration"},{"location":"archive/outline/#sharereuse","text":"Shared libraries Shared build code e.g. gradle plugins, npm scripts Shared testing code Sharing pipeline code e.g. Jenkins Having a platform team that maintains all the tools and standards for other teams","title":"Share/Reuse"},{"location":"archive/outline/#use-open-standards","text":"Open source / free languages Open source tooling Open source application servers Data standards, e.g. HTML, JSON, XML, Markdown, Parquet","title":"Use Open standards"},{"location":"archive/outline/#cloud-first","text":"Lead time to deployment of hardware and applications Hardware lifecycle Holding the pager Reliability, availability Sustainability argument (shared infrastructure)","title":"Cloud First"},{"location":"archive/outline/#cloud-native","text":"Historically people were worried about cloud agnosticism but we have come to realise that using cloud native services, such as SQS on AWS, Google Firestore, Azure DevOps enables solutions to be developed quicker, with scalability and disaster recovery benefits that outweigh the cost of a re-platforming that may never happen","title":"Cloud native"},{"location":"archive/outline/#secure-by-design-continuous-security","text":"Security of your toolchain/development - Use maintained laptops, e.g. PA Laptop with virus protection and ability to be 'bricked' - Use tools/libraries from reputable software houses - Use tools/libraries that are maintained and covered by vulnerability scanning tools - Update tools regularly e.g. IDE - SBOMs/nightly builds to check for vulnerabilities - Secure repositories - Secure build servers - Secure deployment methods e.g. not sharing cloud creds wider than necessary Risk register Principle of least privilege for users Not having secrets on the client side that give access to other users' data/permissions No credentials in code / using a secret store Separation of prod and non-prod MFA Data encryption in transit and in rest Recommended TLS SSH key standards","title":"Secure by design / Continuous security"},{"location":"archive/outline/#sustainable-by-design","text":"Using serverless Turning off resources outside office hours Right sizing Fits in with existing technology and existing knowledge in the organisation","title":"Sustainable by design"},{"location":"archive/outline/#continual-improvement","text":"Horizon scanning / tech radar Using new Cloud tech Meetups internal and external Coding standards / peer review / pair programming","title":"Continual Improvement"},{"location":"archive/outline/#pipelines-automation-release-strategies","text":"Explain CI/CD Automate all the things (Build, security scan, test, deploy, CI/CD, IaC) Monolith / Microservices Git branching/tagging strategies Monorepo / polyrepo Deployment strategies (Rolling, Blue/Green, Canary) Release independent of deploy (dark live, feature switches)","title":"Pipelines / Automation / Release strategies"},{"location":"archive/outline/#monitormeasure-and-analysis","text":"Build/test/deploy times Code has tests, environments have monitoring, metrics, and alarms","title":"Monitor/measure and analysis"},{"location":"archive/outline/#developer-experience","text":"Empowered Developers - able to make changes to dependencies Empowered Teams - cross-functional team able to remove blockers themselves / everything they need to deliver in the gift of the team Local build time e.g. build caches Local test time e.g. ability to run a subset of tests Availability of a local environment or short cycle time dev env CI build time Deployment time","title":"Developer experience"},{"location":"archive/outline/#agile","text":"","title":"Agile?"},{"location":"archive/test/","text":"Test Page \u00b6 Second header \u00b6 First Header Second Header Third Header New Row This is a table Simple styling Moving bits down the page to see navigation working ! Third Header \u00b6 1 2 3 4 5 public class MyClass { public static void main ( String args [] ) { // do something } } Inculpata infirmis differt facies maxima aevi tutam, Haemum medius, aera vulnus studio oppositas rogat carinae sed Iovem cuique. Inminet nec omni spatiantia neque Titan, reuse page from wow folder internal link paret et fata. Natum esse est aequalis est quosque datis absens ait nempe aqua fugias sedes. Tuta nec referens, quos actae finge Terram tu exanimi mecum .","title":"My Test Page"},{"location":"archive/test/#test-page","text":"","title":"Test Page"},{"location":"archive/test/#second-header","text":"First Header Second Header Third Header New Row This is a table Simple styling Moving bits down the page to see navigation working !","title":"Second header"},{"location":"archive/test/#third-header","text":"1 2 3 4 5 public class MyClass { public static void main ( String args [] ) { // do something } } Inculpata infirmis differt facies maxima aevi tutam, Haemum medius, aera vulnus studio oppositas rogat carinae sed Iovem cuique. Inminet nec omni spatiantia neque Titan, reuse page from wow folder internal link paret et fata. Natum esse est aequalis est quosque datis absens ait nempe aqua fugias sedes. Tuta nec referens, quos actae finge Terram tu exanimi mecum .","title":"Third Header"},{"location":"archive/communities/communities/","text":"Communities of Practice \u00b6 Introduction \u00b6 This area contains information relevant to the communities of practice back-end front-end The communities will populate their own information, but we want to include: Relevant technologies and best practice. Examples of what has worked well and what hasn't worked well in our projects.","title":"Communities of Practice"},{"location":"archive/communities/communities/#communities-of-practice","text":"","title":"Communities of Practice"},{"location":"archive/communities/communities/#introduction","text":"This area contains information relevant to the communities of practice back-end front-end The communities will populate their own information, but we want to include: Relevant technologies and best practice. Examples of what has worked well and what hasn't worked well in our projects.","title":"Introduction"},{"location":"archive/communities/back-end/back-end/","text":"Back-end Community of Practice \u00b6 Introduction \u00b6 This is the homepage for the back-end community of practice Within these pages you will find information related to different cloud architectures, containerisation, serverless etc etc. The information held here should help answer questions like: Why Cloud? Which Cloud? Hybrid vs Full Cloud Different types of containerisation What languages, tooling etc are best supported?","title":"Back-end Community of Practice"},{"location":"archive/communities/back-end/back-end/#back-end-community-of-practice","text":"","title":"Back-end Community of Practice"},{"location":"archive/communities/back-end/back-end/#introduction","text":"This is the homepage for the back-end community of practice Within these pages you will find information related to different cloud architectures, containerisation, serverless etc etc. The information held here should help answer questions like: Why Cloud? Which Cloud? Hybrid vs Full Cloud Different types of containerisation What languages, tooling etc are best supported?","title":"Introduction"},{"location":"archive/communities/back-end/why-cloud/","text":"Why Cloud? \u00b6 Introduction \u00b6 This page talks about the differences of on-premise and cloud solutions and provides the reasonings that can be used to explain to customers about why a cloud migration could be useful. Maybe include links to Sharepoint docs of projects where migrations have happened. What was the reasoning? How was it justified? etc etc","title":"Why Cloud?"},{"location":"archive/communities/back-end/why-cloud/#why-cloud","text":"","title":"Why Cloud?"},{"location":"archive/communities/back-end/why-cloud/#introduction","text":"This page talks about the differences of on-premise and cloud solutions and provides the reasonings that can be used to explain to customers about why a cloud migration could be useful. Maybe include links to Sharepoint docs of projects where migrations have happened. What was the reasoning? How was it justified? etc etc","title":"Introduction"},{"location":"archive/communities/front-end/front-end/","text":"Front-end Community of Practice \u00b6 Introduction \u00b6 This is the homepage for the front-end community of practice Within these pages you will find information related to different front-end technologies, best practice, designs etc etc. The information held here should help answer questions like: Multi-page or single-page? Which front-end technology should I use and when? Best practice when using different front-end technologies Links to learning material to help understand different front-end technologies","title":"Front-end Community of Practice"},{"location":"archive/communities/front-end/front-end/#front-end-community-of-practice","text":"","title":"Front-end Community of Practice"},{"location":"archive/communities/front-end/front-end/#introduction","text":"This is the homepage for the front-end community of practice Within these pages you will find information related to different front-end technologies, best practice, designs etc etc. The information held here should help answer questions like: Multi-page or single-page? Which front-end technology should I use and when? Best practice when using different front-end technologies Links to learning material to help understand different front-end technologies","title":"Introduction"},{"location":"archive/guidance-and-standards/guidance-and-standards/","text":"Guidance and Standards \u00b6 Introduction \u00b6 This area contains information relevant to overall approach. The overall principles that we should attempt to adhere to and some standards that are relevant to almost every project","title":"Guidance and Standards"},{"location":"archive/guidance-and-standards/guidance-and-standards/#guidance-and-standards","text":"","title":"Guidance and Standards"},{"location":"archive/guidance-and-standards/guidance-and-standards/#introduction","text":"This area contains information relevant to overall approach. The overall principles that we should attempt to adhere to and some standards that are relevant to almost every project","title":"Introduction"},{"location":"archive/guidance-and-standards/principles/coding-in-the-open/","text":"The Benefits of Coding in the Open: Fostering Collaboration, Innovation, and Learning \u00b6 Introduction \u00b6 Coding in the open, a practice of developing software and sharing the process publicly, has gained traction in the tech community. This page explores the numerous benefits of embracing this transparent approach, which includes, among other things, fostering collaboration, driving innovation, and facilitating continuous learning. Key Concepts/Practical Implementations \u00b6 Developers proactively and openly share their code, ideas, and insights with others. Collaboration and contributions from a wider community are encouraged. Knowledge sharing among developers becomes a central aspect of the process. Feedback, suggestions, improvements and bug identification are sought from users and peers. Continuous learning is facilitated by showcasing skills and receiving feedback from a diverse audience. Collaboration and Knowledge Sharing \u00b6 Coding in the open encourages collaboration among developers, enabling them to share their code, ideas, and insights openly. By making their work accessible, developers invite others to contribute, offer feedback, and collaborate on projects. This inclusive approach broadens perspectives, promotes diversity in thought, and enhances problem-solving. Knowledge sharing becomes a central component, as developers can learn from one another's techniques, solutions, best practices, and sometimes mistakes. Learning from the things that don't quite go as planned is just as, if not more useful, than the things that went well. The open nature of coding facilitates the growth of vibrant communities and ecosystems where participants support and inspire each other. Community Engagement and Feedback \u00b6 When coding in the open, developers can tap into a larger community of peers and users. This engagement creates opportunities for feedback, suggestions, and bug identification. By involving the community, developers gain valuable insights that can improve the quality and functionality of their projects. Users also feel more invested in the development process, as they can follow progress, voice their opinions, and contribute to shaping the software. This collaborative feedback loop empowers developers to build more user-centric applications and ensures that software aligns with the needs and expectations of its intended audience. Transparency and Trust \u00b6 Coding in the open builds trust and transparency within the developer community and beyond. By sharing the development process, including source code, documentation, and issue tracking, developers demonstrate their commitment to openness and accountability. This transparency fosters trust among users, who can review the code for security or quality assurance purposes. Openness also strengthens the reputation of developers and organizations, as it showcases their willingness to stand behind their work. By operating in the open, developers promote a culture of integrity and foster an environment where innovation and collaboration flourish. Continuous Learning and Personal Growth \u00b6 Coding in the open provides a platform for continuous learning and personal growth. Developers can showcase their skills, share their expertise, and receive feedback from a diverse audience. This exposure to different perspectives and ideas pushes developers to stay up to date with industry trends, technologies, and best practices. By engaging with others, developers expand their knowledge and refine their coding abilities. Additionally, the open nature of coding allows developers to reflect on their own work and receive constructive criticism, enabling them to learn from their mistakes and strive for improvement. Conclusion \u00b6 Embracing the practice of coding in the open brings forth a host of benefits. Collaboration, community engagement, transparency, and continuous learning are among the advantages that make this approach valuable. By leveraging the power of open source and promoting a culture of sharing, developers can drive innovation, foster collaboration, and create software that benefits both developers and end-users alike.","title":"Coding in the Open"},{"location":"archive/guidance-and-standards/principles/coding-in-the-open/#the-benefits-of-coding-in-the-open-fostering-collaboration-innovation-and-learning","text":"","title":"The Benefits of Coding in the Open: Fostering Collaboration, Innovation, and Learning"},{"location":"archive/guidance-and-standards/principles/coding-in-the-open/#introduction","text":"Coding in the open, a practice of developing software and sharing the process publicly, has gained traction in the tech community. This page explores the numerous benefits of embracing this transparent approach, which includes, among other things, fostering collaboration, driving innovation, and facilitating continuous learning.","title":"Introduction"},{"location":"archive/guidance-and-standards/principles/coding-in-the-open/#key-conceptspractical-implementations","text":"Developers proactively and openly share their code, ideas, and insights with others. Collaboration and contributions from a wider community are encouraged. Knowledge sharing among developers becomes a central aspect of the process. Feedback, suggestions, improvements and bug identification are sought from users and peers. Continuous learning is facilitated by showcasing skills and receiving feedback from a diverse audience.","title":"Key Concepts/Practical Implementations"},{"location":"archive/guidance-and-standards/principles/coding-in-the-open/#collaboration-and-knowledge-sharing","text":"Coding in the open encourages collaboration among developers, enabling them to share their code, ideas, and insights openly. By making their work accessible, developers invite others to contribute, offer feedback, and collaborate on projects. This inclusive approach broadens perspectives, promotes diversity in thought, and enhances problem-solving. Knowledge sharing becomes a central component, as developers can learn from one another's techniques, solutions, best practices, and sometimes mistakes. Learning from the things that don't quite go as planned is just as, if not more useful, than the things that went well. The open nature of coding facilitates the growth of vibrant communities and ecosystems where participants support and inspire each other.","title":"Collaboration and Knowledge Sharing"},{"location":"archive/guidance-and-standards/principles/coding-in-the-open/#community-engagement-and-feedback","text":"When coding in the open, developers can tap into a larger community of peers and users. This engagement creates opportunities for feedback, suggestions, and bug identification. By involving the community, developers gain valuable insights that can improve the quality and functionality of their projects. Users also feel more invested in the development process, as they can follow progress, voice their opinions, and contribute to shaping the software. This collaborative feedback loop empowers developers to build more user-centric applications and ensures that software aligns with the needs and expectations of its intended audience.","title":"Community Engagement and Feedback"},{"location":"archive/guidance-and-standards/principles/coding-in-the-open/#transparency-and-trust","text":"Coding in the open builds trust and transparency within the developer community and beyond. By sharing the development process, including source code, documentation, and issue tracking, developers demonstrate their commitment to openness and accountability. This transparency fosters trust among users, who can review the code for security or quality assurance purposes. Openness also strengthens the reputation of developers and organizations, as it showcases their willingness to stand behind their work. By operating in the open, developers promote a culture of integrity and foster an environment where innovation and collaboration flourish.","title":"Transparency and Trust"},{"location":"archive/guidance-and-standards/principles/coding-in-the-open/#continuous-learning-and-personal-growth","text":"Coding in the open provides a platform for continuous learning and personal growth. Developers can showcase their skills, share their expertise, and receive feedback from a diverse audience. This exposure to different perspectives and ideas pushes developers to stay up to date with industry trends, technologies, and best practices. By engaging with others, developers expand their knowledge and refine their coding abilities. Additionally, the open nature of coding allows developers to reflect on their own work and receive constructive criticism, enabling them to learn from their mistakes and strive for improvement.","title":"Continuous Learning and Personal Growth"},{"location":"archive/guidance-and-standards/principles/coding-in-the-open/#conclusion","text":"Embracing the practice of coding in the open brings forth a host of benefits. Collaboration, community engagement, transparency, and continuous learning are among the advantages that make this approach valuable. By leveraging the power of open source and promoting a culture of sharing, developers can drive innovation, foster collaboration, and create software that benefits both developers and end-users alike.","title":"Conclusion"},{"location":"archive/guidance-and-standards/principles/reuse/","text":"Principle of Reuse \u00b6 Introduction \u00b6 Reuse as a concept is simple to achieve. In practice it can be more difficult. In general, we should encourage reuse wherever possible, this can be within a project but also can span wider to cross project. There are things that can be done to bootstrap projects to make everyones lives simpler and reuse can make it easier to transition from one project to another Reuse can extend across many areas of a project, some examples: Documentation Project Initiation Project Cadence Template Code Libraries Code Snippets etc","title":"Principle of Reuse"},{"location":"archive/guidance-and-standards/principles/reuse/#principle-of-reuse","text":"","title":"Principle of Reuse"},{"location":"archive/guidance-and-standards/principles/reuse/#introduction","text":"Reuse as a concept is simple to achieve. In practice it can be more difficult. In general, we should encourage reuse wherever possible, this can be within a project but also can span wider to cross project. There are things that can be done to bootstrap projects to make everyones lives simpler and reuse can make it easier to transition from one project to another Reuse can extend across many areas of a project, some examples: Documentation Project Initiation Project Cadence Template Code Libraries Code Snippets etc","title":"Introduction"},{"location":"archive/guidance-and-standards/standards/project-documentation/","text":"Project Documentation \u00b6 Introduction \u00b6 There are minimal standards that should be achieved across all projects for the documenation produced. This ranges from architectural diagrams and design documentation to documentation within code etc. This page describes the sort of documentation and documentation structure that should be achieved for all projects. It also attempts to give examples of good documentation that can be used as a template or a benchmark.","title":"Project Documentation"},{"location":"archive/guidance-and-standards/standards/project-documentation/#project-documentation","text":"","title":"Project Documentation"},{"location":"archive/guidance-and-standards/standards/project-documentation/#introduction","text":"There are minimal standards that should be achieved across all projects for the documenation produced. This ranges from architectural diagrams and design documentation to documentation within code etc. This page describes the sort of documentation and documentation structure that should be achieved for all projects. It also attempts to give examples of good documentation that can be used as a template or a benchmark.","title":"Introduction"},{"location":"archive/learning-zone/learning-zone/","text":"Learning Zone \u00b6 Introduction \u00b6 This area of the site is intended to provide learning material. This could be our own material of links out to other material that has been reviewed and deemed useful.","title":"Learning Zone"},{"location":"archive/learning-zone/learning-zone/#learning-zone","text":"","title":"Learning Zone"},{"location":"archive/learning-zone/learning-zone/#introduction","text":"This area of the site is intended to provide learning material. This could be our own material of links out to other material that has been reviewed and deemed useful.","title":"Introduction"}]}